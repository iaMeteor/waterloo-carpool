// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.example.domain;

import com.example.domain.Post;
import com.example.domain.PostDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;

privileged aspect PostDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PostDataOnDemand: @Component;
    
    private Random PostDataOnDemand.rnd = new SecureRandom();
    
    private List<Post> PostDataOnDemand.data;
    
    public Post PostDataOnDemand.getNewTransientPost(int index) {
        Post obj = new Post();
        setDate_time(obj, index);
        setDestination(obj, index);
        setName(obj, index);
        setOff_LF(obj, index);
        setOrigin(obj, index);
        setPrice(obj, index);
        setTel(obj, index);
        return obj;
    }
    
    public void PostDataOnDemand.setDate_time(Post obj, int index) {
        String date_time = "date_time_" + index;
        obj.setDate_time(date_time);
    }
    
    public void PostDataOnDemand.setDestination(Post obj, int index) {
        String destination = "destination_" + index;
        obj.setDestination(destination);
    }
    
    public void PostDataOnDemand.setName(Post obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void PostDataOnDemand.setOff_LF(Post obj, int index) {
        Boolean off_LF = Boolean.TRUE;
        obj.setOff_LF(off_LF);
    }
    
    public void PostDataOnDemand.setOrigin(Post obj, int index) {
        String origin = "origin_" + index;
        obj.setOrigin(origin);
    }
    
    public void PostDataOnDemand.setPrice(Post obj, int index) {
        Float price = new Integer(index).floatValue();
        obj.setPrice(price);
    }
    
    public void PostDataOnDemand.setTel(Post obj, int index) {
        String tel = "tel_" + index;
        obj.setTel(tel);
    }
    
    public Post PostDataOnDemand.getSpecificPost(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Post obj = data.get(index);
        Long id = obj.getId();
        return Post.findPost(id);
    }
    
    public Post PostDataOnDemand.getRandomPost() {
        init();
        Post obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Post.findPost(id);
    }
    
    public boolean PostDataOnDemand.modifyPost(Post obj) {
        return false;
    }
    
    public void PostDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Post.findPostEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Post' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Post>();
        for (int i = 0; i < 10; i++) {
            Post obj = getNewTransientPost(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
